THINGS YOU CAN DO W/ JS:

    JavaScript sprinkles: AJAX - adding interactivity - form submissions - 
    loading screeens - popups/modals - updating data on a sub form

    Web App: complete app - frameworks= react, vue, angular, svelte, 
    vanillajs(regular js)

    Sever Software: Node.js = express, nest.js, sail.js 

    Mobile Apps: react native, native script, cordova 

    Desktop App: electron 

    Games: Phaser, webGL, Three.js 

    Hardware: Arduino 

HISTORY:
    ECMA = JavaScript 

ECMASCRIPT RUNTIMES:
    Google chrome - V8 engine 
    firefox - spidermokey warpmokney 
    microsoft edge - blink now V8
    internet explorer - chakra (no longer supported)
    Node.js - V8

WAYS OF WRITING JS
    inline -  not reccomended 
    internal - sometimes appropriate = <script> inside body or head of HTML 
        mostly used in things like google adds, to load befoer application 
        loads or external tools 
    external - preffered = load it in each HTML

Notes: (random)
    code . = open VS code
    emmet 
    To run html file/ js on browser: 
        Right click on html => copy path => past into broswer
    when making repo => press period to open VS code and start project that has 
        been created or have README file 


WHITE SPACE:
    does not have meaning or do anything is JS 

CASE SENSITIVITY:   
    when naming functions, classes, etc 
    be specific with varible names
    EX:
    const hello = "world";
    let HELLO = "WORLD!";
     
     console.log(hello) => frist hello 

COMMENTS:
    used for adding comment to code
    make a list of to-do items 
    EX:
    shortcut => command - forward slash = making comment 
    Use TODO: when ding projects or tracking progress
    Multy line comment */ type */

SEMI-COLONS:
    are optional in most cases 

CONSOLE:
    Right click on browser => inspect 



GIT:

    git branch - d => delete branch 
    git branch => shows all branches - hit :q to exit 

DATA TYPES:

    typeof() => will return a type of object - not a function is a keyword 


    Primitive data types:
        String:
            anything within a quotation mark
            EX: let hello = "world" or use single quotes 
            Template literal: let greeting = 'hello ${hello};
                                greeting (being entered)
                                returned ; 'hello world'
            concatnating: let string1 ='hello'
                            let string2 = 'world'
                            string1 + '' + string2
                            returns 'hello world'
            Properties: 
                .padStart() & .padEnd() => study this property 


        Number:
            integer 
            infinity 
        Boolean:
            true === 0 => false 
            true == 0 => false
        Undefined:
            let varible => undefined because no value is assigned to varible 
        Null:
            null inherits from object 
            let var = null will return null 
        Big int:
            let bigOne = 1n => adding n to number values 
            does not have infinity
            cannot be a decimal
        Symbol:
            let sym = Symbol("im a symbol") => creates an 
                anonymous unique value 
            

VARIABLES:
    var - used in previous JS versions
    let - declared values can be reassigned | can only be declared once 
    const - declared values can not be reassigned

OPERATORS:
    Assignment
    = assignment
    += addition assignment
    -= subtraction assignment
    *= multiplication assignment
    /= division assignment
    Arithmetic
    + addition
    - subtraction
    * multiplication
    / division
    % modulo
    || or 
    && and 
    

    !(1 != true) => reverses it 

Concatination: + in making a statement 

Template literal: using {variable} in a long story => 
    refer to day 2 takehome 

DAY 3:

Additional notes:
  arr[num] => gives back idx of element in arr or string 
  str.indexOf[0] => will give the index of varible inside []
  str.slice(str.indexOf('Wo')) => give starting index of an 
        array or get the last word 


STRING METHODS 

    Array and string methods: 

        property that belongs to strings AND array: 
            .length() 
            arr[num] => gives back idx of element in arr or string 
            str.indexOf[0] => will give the index of varible inside []
            str.slice(str.indexOf('Wo')) => give starting index of an 
                array or get the last word 
            join() => takes elements of array and joins it to a sting 
            arr.join(', ') => joins as a string
            arr.reverse.join(', ') => reverse it and join as a string 
            split() => can undo a join but remains a string 
                can split string as well alike an array
    
    strings:

        methods: ! CASE SENSITIVITY ! 
            str.toUpperCase() => everything to upper case
            str.toLowerCase() => everything to lower case
            str.replace() => will replace the first instance 
            str.replaceAll() => will replace all elements
            str.repeat() => repeat the element inputed into function 
            str.startsWith() => to check if string starts with input given in function
            str.endsWith() => check if str ends with input in function 
            str.includes() => check to see if input is anywhere in the str 

POP UP METHODS 

    alert(userName) => pop up alert in browser 
        can add more to the string to deliver more of a msg
    confirm() => gives a cancel or ok in the browser notfication tab 
        when hit cancel = false vs ok would = true 
    prompt() => asks user on browser for a value 
        gives back string value 
        prompt('enter' , 10) => default value 
        EXAMPLE REVERSE | SPLIT | JOIN : 
        const firstName = prompt('Please enter your first name')
        const splitName = firstName.split('')
        let reversedName = splitName.reverse()
        reversedName = reversedName.join()
        alert(splitName.reverse().join())

        let num = 25 => num is string 
        parseInt(num) => makes it an integer 

        PARSE INT EXAMPLE:
        let newNum = parseInt(prompt('Enter a number', 10))
        let newNum2 = parseInt(prompt('Enter a second number', 10))
        alert('Your result: ' + (newNum + newNum2)) 
        OR 
        const firstNum = prompt('enter num', 10)
        const secondNum = prompt('enter num', 10)
        const firstInt = parseInt(firstNum)
      

MATH PROPERTIES 
    Global object
        can call anywhere in JS 
        is own object 
        Math. => has many properties | use console.log to display all
        !!! check class docs for all math operations !!


DATE OBJECT   
    Date() => will return a string of the current date time 
    const today = new Date() = call today and will return current day and time 
    Date.now => is a function that returns a number 
    Date.parse(numbers/dates in string) => will return a number value 
    let tomorrow = new Date(2021, 11, 8,7, 5, 7)
    let nextMonth = new Date(tomorrow.getFullYear(), tomorrow.getMonth() + 1
    , tomorrow.getDate) => to get the next date in the next month 
    Date.parse('date number').toString()

    newDay.toLocaleDateString('en') =>  gives todays date
    new Date(Date.now()) => date and time 
    new Date(now).getHours
    new Date(now).getMinutes



DAY 4:


    CONTROL FLOW:

        Else If/ if/ else:
            Condition: is any expression that is truthy or falsey 
            Expression: is any code that resolves to a value | can be almost anything
            Statement: code path executed if condition is truthy 
        If / Else:
            EXAMPLE:
                if (true) {
                    // do the following 
                } else {
                    // Otherwise do this 
                }
        Else If:
           EXAMPLE:
                if (true) {
                    // do the following 
                } else if (something == null) {
                    // Otherwise do this 
                } else {
                    // unless none above apply do this 
                }

            
        Comparison Operator
            === strict equal
            !== strict not equal
            > greater than
            >= greater than or equal
            < less than
            <= less than or equal
        Truthy and Falsy
            Falsy
                False
                0
                Empty string ""
                Null
                Undefined
                NaN
            Truthy
                All other values
            Logical Operators
                && and
                || or
                ! not
        EXAMPLE: converting numbers 
        *ParseInt() => converts a string to an interger 

            let num = prompt("enter")
            const convertnum = parseInt(num):
            if (num > 1 && num < 10) {
                alert()
            } else {
                alert()
            }

            let userProfile = {
                userRole: 'admin',
                fname: 'grace',
                lname: 'birnam',
                department: 'IT',
                permissionLevel: '2'

            }

            if(userProfile.userRole === 'admin' || userProfile.userRole === "manager") {
                alert('you have access')
            }

            if(userProfile.userRole === 'manager' || userProfile.department === "IT" && userProfile.permissionLevel >= 2) {
                alert('you have access')
            }


            true && true === true 
            false && true ===  false 
            false && false === false 
            true && false ===  false 

            true || true === true 
            false || true ===  true 
            false || false === false 
            true || false ===  true  
            
        Switch Statement:
            for comparing type of something or data values

            let submittedForm = {
                firstName: 'grace',
                lastName: 'birnam',
                formType: '1099',

            }

            switch (submittedForm.formType) {
                case '1099':
                    //process 1099 form 
                    break
                case 'W-2':
                    //process w-2
                    break
                default: 
                    alert(`Form Type ${submittedForm.formType} not regonized`);''
                    break
            }

            VS 

            if (submittedForm.formType === '1099') {

            } else if (submittedForm.formType === 'w-2) {

            } else {

            }

        Conditional / Ternary operator:

            let accessGranted = userProfile.userRole === "manager" ? ture:false


DAY 5:

    Anonymous Functions
    Parameters
    function Declaration vs Function Expressions
    Calling a Function
    return Keyword
    Arrow Functions

        EXAMPLES:
            let input1
            let input2
            let convertedInput1
            let convertedInput2

            function promptUser() {
                input1 = prompt("enter a number")
                input2 = prompt("enter another number")
            }

            function convertInput() {
                convertedInput1 = pasreInt(input1)
                convertedInput2 = pasreInt(input2) 
                }

            function getMaxNumber() {
                if (convertedInput1 && convertedInput2) {
                if (convertedInput1 > convertedInput2)
                alert(`${convertedInput1} is greater than ${convertedInput2`}
                else if(convertedInput1 === convertedInput2)
                alert(numbers are equal)
                else 
                    alert(`${convertedInput2} is greater than ${convertedInput1`}
                }

            }

            function  isValidNumber() {
                return convertedInput1 && convertedInput2
            }

            TO DECALRE A Function: fucntion functionName(paramaters) {
                console.log(`${Parameters})
            }

            Paramater = anything that resolves to a value 
            Default values: 
                setting paramater with inital values 
                if an undefied value comes into the paramter it results in the default value 

            primitive values: number, string, null, symbol, boolean 

            referance values: objects and arrays 

            Annonymous function:
                let changeNumber = function(num) {
                    num *=10
                    return num;
                } 
                can create a function with the same name as another fucntion 
            
            Return:
                can return a value | nothing | is alike break - it will stop execution and return the value presented to it
                can use return instead of break in a switch statement 


            Arrow fucntion:
                shouldn't use for methods 
                differences and limitations
                anything delcared within the local scope is not avaibale to global scope 
                inside {} is a local scope 
                
DAY 6:

    Promises:
        something that will be done sometime 
        kind of an IOU
        allows for supporting asychronous operations 

        3 states:
            pending: IOU state nothing to check 
            resolved: processingg 
            rejected: not happening

        Asynchronous:
            doesn't happen at the same time 
            think of a resturant kitchen 
            so far everything has been synchronous 
            operations may not be completed yet 
            bites a lot of new devs 

        How to create a promise:

            const asychronousFunction = new Promise((resolve, reject) => {
                //reject(new Error("failed to load"))
                setTimeout(() => {
                    resolve('A asynch msg');
                }, 4000)
            })

            console.log(asychronousFunction());

            how to call:

            function alertMsg(message) {
                alert(message)
            }


            function logError(error) {
                console.log(error.message);
            }

            asychronousFunction().then((message) => {
                console.log(message)
            })

            asychronousFunction.then(alertMsg, logError);

        ADDING MORE 

            const asychronousFunction = new Promise((resolve, reject) => {
                //reject(new Error("failed to load"))
                setTimeout(() => {
                    resolve('A asynch msg');
                }, 4000)
            })

            console.log(asychronousFunction());

            how to call:

            function alertMsg(message) {
                alert(message)
            }

            function telephone(message) {
                return `${message} im adding more`
            }

            function logError(error) {
                console.log(error.message);
            }

            asychronousFunction
            .then(telephone, logError)
            .then(alertMsg, logError)

            .catch(logError) => to add a ton of log errors | its a catch all so any reject that happens it'll insert it 
            .finally(() => {
                console.log('done with it all')
            }) => will happen after everything is done
            
            console.log('this will happen')
            asychronousFunction.then(alertMsg, logError);

        To use when trying to find any errors may run into 
         
            try {

            } catch (ex) {

            } finally {

            }

        .all(any number of Promises) 
            => will make multiple things happen and resolve 
            EXAMPLE:

            let promises = []
            for (let index = 0; i < 10; index++) {
                promises[index] = new Promise((resolve, reject) {
                    const timer = Math.round(Math.random() * 10)
                    setTimeout(() => {
                        resolve(timer)
                    } , 400)

                })
            }
            console.log(promises)
            Promise.all(promise)
            .then((values) => {
                console.log('everything resolved and done')
                console.log(values)
            })
            .then(alertMsg)
            .then(logError)

        ASYNC / AWAIT :

            keywords 
            fairly new to JS
            works with promises 
            will return data later 
            can call the await keyword on the async function 
            cannot do / work in global scope because global is not asynch it is ran sync 




    APIs:
        Usually have a key 
        Some need authenitcation 
        Some are open but rate limited 
        use fetch to acess data 
            fetch(URL).then(response => {
                
            })

    JSON:

